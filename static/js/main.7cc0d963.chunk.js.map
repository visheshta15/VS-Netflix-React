{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchToprated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumenteries","Banner","str","n","setMovie","Math","floor","random","length","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7cc0d963.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/*base url to make request to the movi databae*/\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n})\r\n\r\n/*axios.get('abc') => 'https://api.themoviedb.org/3/abc'*/\r\nexport default instance;\r\n","import React, {useState, useEffect} from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css'\r\nimport   'react-youtube'\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/'\r\n\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}){\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] =  useState('');\r\n\r\n    //snippet of code which runs based on specific condition/variable\r\n    useEffect(() => {\r\n        //if [], runs once when the row loads, and dont run again ,if [movies], when movies changes the useEffect(() will get executes\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl])  \r\n    \r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n            setTrailerUrl('');\r\n        }else{\r\n            movieTrailer(movie?.name || '')\r\n            .then((url) => {\r\n                //https://www.youtube.com/watch?v=XtMThy8QKqU&t=3053s\r\n                const urlParams = new URLSearchParams( new URL(url).search)\r\n                setTrailerUrl( urlParams.get('v'))\r\n            })\r\n            .catch((error) => console.error(error))\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n\r\n            <div className='row_posters'>\r\n                {movies.map(movie => ( \r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} \r\n                    src={`${base_url}${isLargeRow? movie.poster_path : movie.backdrop_path}`} alt={movie.name}  />\r\n                ) )}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","const API_KEY = 'b78eead71975984caa9efa8f42d6e3f6';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchToprated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumenteries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    \r\n}\r\n\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie((request.data.results[\r\n                Math.floor(Math.random()*request.data.results.length -1)\r\n            ]))\r\n            console.log(Math.floor(Math.random()*request.data.results.length -1))\r\n        }\r\n        fetchData();\r\n    },[])\r\n    console.log('a',movie)\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n? str.substr(0, n-1) + '...': str;\r\n    }\r\n\r\n    return (\r\n        <header \r\n        className='banner'\r\n        style={{\r\n            backgroundSize: 'cover',\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition:'center center'\r\n        }}>\r\n            <div className='banner_contents'>\r\n                <h1 className='banner_title'>{movie?.name || movie?.title || movie?.original_name}</h1>\r\n                <div className='banner_buttons'>\r\n                    <button className='banner_button'>Play</button>\r\n                    <button className='banner_button'>My List</button>\r\n                </div>\r\n                <h1 className='banner_desc'>{movie?.overview}\r\n                {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className='banner--fadeBottom' /> \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow]  = useState(false)\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', ()=> {\r\n            if (window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener('scroll')\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav_black'}`}>\r\n            <img\r\n                className='nav_logo'\r\n                src='https://th.bing.com/th/id/OIP.0-lS_7BPkwY-RTbBq9lM0AHaEc?w=292&h=180&c=7&o=5&dpr=1.25&pid=1.7'\r\n                alt='   Netflix Logo'\r\n            />\r\n            <img\r\n                className='nav_avtar'\r\n                src='https://pro2-bar-s3-cdn-cf1.myportfolio.com/dddb0c1b4ab622854dd81280840458d3/98032aebff601c1d993e12a0_rw_600.png?h=8030f4d5734548795c22da59ca72e3e1'\r\n                alt='   Netflix Logo'\r\n            />\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport Row from './Row';\nimport Banner from './Banner';\nimport Nav from './Nav'\nimport './App.css';\nimport requests from './requests';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row \n      title='NETFLIX ORIGINALS'\n      fetchUrl = {requests.fetchNetflixOriginals}  \n      isLargeRow\n      />\n      <Row \n      title='Trending Now'\n      fetchUrl = {requests.fetchTrending}  \n      />\n      <Row \n      title='Top Rated'\n      fetchUrl = {requests.fetchToprated}  \n      />\n      <Row \n      title='Action Movies'\n      fetchUrl = {requests.fetchActionMovies}  \n      />\n      <Row \n      title='Comedy Movies'\n      fetchUrl = {requests.fetchComedyMovies}  \n      />\n      <Row \n      title='Horror Movies'\n      fetchUrl = {requests.fetchHorrorMovies}  \n      />\n      <Row \n      title='Romance Movies'\n      fetchUrl = {requests.fetchRomanceMovies}  \n      />\n      <Row \n      title='Documentries'\n      fetchUrl = {requests.fetchDocumenteries}  \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}